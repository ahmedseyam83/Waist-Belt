
Waist-Belt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000fb0  00001044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00800082  00800082  00001066  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031a4  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f7  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018a0  00000000  00000000  000056af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  00006f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010dd  00000000  00000000  00007760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017cc  00000000  00000000  0000883d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000a009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_1>
   8:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_2>
   c:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_3>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__vector_6>
  1c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_7>
  20:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_8>
  24:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_9>
  28:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_10>
  2c:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__vector_11>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	a9 04       	cpc	r10, r9
  56:	b3 04       	cpc	r11, r3
  58:	bd 04       	cpc	r11, r13
  5a:	c7 04       	cpc	r12, r7
  5c:	d1 04       	cpc	r13, r1
  5e:	db 04       	cpc	r13, r11
  60:	e5 04       	cpc	r14, r5

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e0 eb       	ldi	r30, 0xB0	; 176
  76:	ff e0       	ldi	r31, 0x0F	; 15
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 38       	cpi	r26, 0x82	; 130
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e8       	ldi	r26, 0x82	; 130
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a6 3d       	cpi	r26, 0xD6	; 214
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  98:	0c 94 d6 07 	jmp	0xfac	; 0xfac <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <Belt_ON>:
 * @return      - none
 * @note        - ON/OFF Vibration Unit vibrate twice each for 0.5sec when mode activated
 */
void Belt_ON(void)
{
	state=ON;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <state>
	DIO_WritePin(ONOFF_VIBRATION,HIGH);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	84 e1       	ldi	r24, 0x14	; 20
  aa:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	84 e3       	ldi	r24, 0x34	; 52
  b2:	9c e0       	ldi	r25, 0x0C	; 12
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <Belt_ON+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <Belt_ON+0x1e>
  be:	00 00       	nop
	_delay_ms(500);
	DIO_WritePin(ONOFF_VIBRATION,LOW);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	84 e1       	ldi	r24, 0x14	; 20
  c4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
  c8:	2f e7       	ldi	r18, 0x7F	; 127
  ca:	8a e1       	ldi	r24, 0x1A	; 26
  cc:	96 e0       	ldi	r25, 0x06	; 6
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <Belt_ON+0x2e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <Belt_ON+0x38>
  d8:	00 00       	nop
	_delay_ms(250);
	DIO_WritePin(ONOFF_VIBRATION,HIGH);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	84 e1       	ldi	r24, 0x14	; 20
  de:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	84 e3       	ldi	r24, 0x34	; 52
  e6:	9c e0       	ldi	r25, 0x0C	; 12
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <Belt_ON+0x48>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Belt_ON+0x52>
  f2:	00 00       	nop
	_delay_ms(500);
	DIO_WritePin(ONOFF_VIBRATION,LOW);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	84 e1       	ldi	r24, 0x14	; 20
  f8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
  fc:	08 95       	ret

000000fe <Belt_STANDBY>:
 * @note        - ON/OFF Vibration Unit vibrate once for 0.5sec when mode activated
 */

void Belt_STANDBY(void)
{
	state=STANDBY;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <state>
	WDT_Stop();
 104:	0e 94 12 07 	call	0xe24	; 0xe24 <WDT_Stop>
	DIO_WritePin(ONOFF_VIBRATION,HIGH);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	84 e1       	ldi	r24, 0x14	; 20
 10c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	84 e3       	ldi	r24, 0x34	; 52
 114:	9c e0       	ldi	r25, 0x0C	; 12
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <Belt_STANDBY+0x18>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <Belt_STANDBY+0x22>
 120:	00 00       	nop
	_delay_ms(500);
	DIO_WritePin(ONOFF_VIBRATION,LOW);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	84 e1       	ldi	r24, 0x14	; 20
 126:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	CPU_Sleep(STANDBY_MODE);
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <CPU_Sleep>
 130:	08 95       	ret

00000132 <Belt_OFF>:
 */

void Belt_OFF(void)
{
	u8 static first_time=1;
	state=OFF;
 132:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <state>
	WDT_Stop();
 136:	0e 94 12 07 	call	0xe24	; 0xe24 <WDT_Stop>
	if (first_time==0)
 13a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13e:	81 11       	cpse	r24, r1
 140:	11 c0       	rjmp	.+34     	; 0x164 <Belt_OFF+0x32>
	{
		DIO_WritePin(ONOFF_VIBRATION,HIGH);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	84 e1       	ldi	r24, 0x14	; 20
 146:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	8e e9       	ldi	r24, 0x9E	; 158
 14e:	94 e2       	ldi	r25, 0x24	; 36
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <Belt_OFF+0x1e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <Belt_OFF+0x28>
 15a:	00 00       	nop
		_delay_ms(1500);
		DIO_WritePin(ONOFF_VIBRATION,LOW);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	84 e1       	ldi	r24, 0x14	; 20
 160:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	}
	first_time=0;
 164:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	CPU_Sleep(PWR_DOWN_MODE);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <CPU_Sleep>
 16e:	08 95       	ret

00000170 <Belt_State>:
 * @return      - none
 * @note        - Used in Interrupt Function to never be missed
 */
void Belt_State(void)
{
	while(!DIO_ReadPin(ONOFF_BUTTON));
 170:	8a e1       	ldi	r24, 0x1A	; 26
 172:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_ReadPin>
 176:	88 23       	and	r24, r24
 178:	d9 f3       	breq	.-10     	; 0x170 <Belt_State>
	if (state == OFF)
 17a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <state>
 17e:	81 11       	cpse	r24, r1
 180:	03 c0       	rjmp	.+6      	; 0x188 <Belt_State+0x18>
		Belt_STANDBY();	
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <Belt_STANDBY>
 186:	08 95       	ret
	else if(state == STANDBY)
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	19 f4       	brne	.+6      	; 0x192 <Belt_State+0x22>
		Belt_ON();
 18c:	0e 94 50 00 	call	0xa0	; 0xa0 <Belt_ON>
 190:	08 95       	ret
	else if(state == ON)
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	11 f4       	brne	.+4      	; 0x19a <Belt_State+0x2a>
		Belt_OFF();
 196:	0e 94 99 00 	call	0x132	; 0x132 <Belt_OFF>
 19a:	08 95       	ret

0000019c <ULTRASONIC_Measure>:
 * @note        - none
 */

void ULTRASONIC_Measure(void)
{
	u8 ultrasonic= ULTRASONIC_GetDistance(ULTRASONIC_1);
 19c:	88 e1       	ldi	r24, 0x18	; 24
 19e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ULTRASONIC_GetDistance>
	if (ultrasonic >=20 && ultrasonic <=100)
 1a2:	84 51       	subi	r24, 0x14	; 20
 1a4:	81 35       	cpi	r24, 0x51	; 81
 1a6:	20 f4       	brcc	.+8      	; 0x1b0 <ULTRASONIC_Measure+0x14>
		Warning_flag1=1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <Warning_flag1>
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <ULTRASONIC_Measure+0x18>
	else
		Warning_flag1=0;
 1b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <Warning_flag1>
	
	ultrasonic= ULTRASONIC_GetDistance(ULTRASONIC_2);
 1b4:	89 e1       	ldi	r24, 0x19	; 25
 1b6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ULTRASONIC_GetDistance>
	if (ultrasonic >=20 && ultrasonic <=100)
 1ba:	84 51       	subi	r24, 0x14	; 20
 1bc:	81 35       	cpi	r24, 0x51	; 81
 1be:	20 f4       	brcc	.+8      	; 0x1c8 <ULTRASONIC_Measure+0x2c>
		Warning_flag2=1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Warning_flag2>
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <ULTRASONIC_Measure+0x30>
	else
		Warning_flag2=0;
 1c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <Warning_flag2>
			
	ultrasonic= ULTRASONIC_GetDistance(ULTRASONIC_3);
 1cc:	8b e1       	ldi	r24, 0x1B	; 27
 1ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ULTRASONIC_GetDistance>
	if (ultrasonic >=20 && ultrasonic <=100)
 1d2:	84 51       	subi	r24, 0x14	; 20
 1d4:	81 35       	cpi	r24, 0x51	; 81
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <ULTRASONIC_Measure+0x44>
		Warning_flag3=1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <Warning_flag3>
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <ULTRASONIC_Measure+0x48>
	else
		Warning_flag3=0;
 1e0:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <Warning_flag3>
		
	ultrasonic= ULTRASONIC_GetDistance(ULTRASONIC_4);
 1e4:	8c e1       	ldi	r24, 0x1C	; 28
 1e6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ULTRASONIC_GetDistance>
	if (ultrasonic >=20 && ultrasonic <=100)
 1ea:	84 51       	subi	r24, 0x14	; 20
 1ec:	81 35       	cpi	r24, 0x51	; 81
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <ULTRASONIC_Measure+0x5c>
		Warning_flag4=1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 1f6:	08 95       	ret
	else
		Warning_flag4=0;
 1f8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
 1fc:	08 95       	ret

000001fe <Warning_Action>:
 * @note        - none
 */

void Warning_Action(void)
{
	if (Warning_flag1 ==1)
 1fe:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Warning_flag1>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	29 f4       	brne	.+10     	; 0x210 <Warning_Action+0x12>
		DIO_WritePin(VIBRATION_1,HIGH);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
 20e:	04 c0       	rjmp	.+8      	; 0x218 <Warning_Action+0x1a>
	else
		DIO_WritePin(VIBRATION_1,LOW);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	
	if (Warning_flag2 ==1)
 218:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Warning_flag2>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	29 f4       	brne	.+10     	; 0x22a <Warning_Action+0x2c>
	DIO_WritePin(VIBRATION_2,HIGH);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	81 e1       	ldi	r24, 0x11	; 17
 224:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
 228:	04 c0       	rjmp	.+8      	; 0x232 <Warning_Action+0x34>
	else
	DIO_WritePin(VIBRATION_2,LOW);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e1       	ldi	r24, 0x11	; 17
 22e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	
	if (Warning_flag3 ==1)
 232:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Warning_flag3>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	29 f4       	brne	.+10     	; 0x244 <Warning_Action+0x46>
	DIO_WritePin(VIBRATION_3,HIGH);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	85 e1       	ldi	r24, 0x15	; 21
 23e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
 242:	04 c0       	rjmp	.+8      	; 0x24c <Warning_Action+0x4e>
	else
	DIO_WritePin(VIBRATION_3,LOW);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	85 e1       	ldi	r24, 0x15	; 21
 248:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	
	if (Warning_flag4 ==1)
 24c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	29 f4       	brne	.+10     	; 0x25e <Warning_Action+0x60>
	DIO_WritePin(VIBRATION_4,HIGH);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	83 e1       	ldi	r24, 0x13	; 19
 258:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
 25c:	08 95       	ret
	else
	DIO_WritePin(VIBRATION_4,LOW);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	83 e1       	ldi	r24, 0x13	; 19
 262:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
 266:	08 95       	ret

00000268 <Func_OVF>:
		*Pdistance = distance;
		Timer1_OVF_InterruptEnable();
		return 1;
	}
	return 0;	
}
 268:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <c>
 26c:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <c+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <c+0x1>
 276:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <c>
 27a:	08 95       	ret

0000027c <Func_ICU>:
 27c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <flag>
 280:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <flag+0x1>
 284:	89 2b       	or	r24, r25
 286:	79 f4       	brne	.+30     	; 0x2a6 <Func_ICU+0x2a>
 288:	86 b5       	in	r24, 0x26	; 38
 28a:	97 b5       	in	r25, 0x27	; 39
 28c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <t1+0x1>
 290:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <t1>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <flag+0x1>
 29c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <flag>
 2a0:	0e 94 46 06 	call	0xc8c	; 0xc8c <Timer1_InputCaptureEdge>
 2a4:	08 95       	ret
 2a6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <flag>
 2aa:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <flag+0x1>
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	99 f4       	brne	.+38     	; 0x2d8 <Func_ICU+0x5c>
 2b2:	86 b5       	in	r24, 0x26	; 38
 2b4:	97 b5       	in	r25, 0x27	; 39
 2b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <t2+0x1>
 2ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <t2>
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <flag+0x1>
 2c6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <flag>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 46 06 	call	0xc8c	; 0xc8c <Timer1_InputCaptureEdge>
 2d0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Timer1_OVF_InterruptDisable>
 2d4:	0e 94 56 06 	call	0xcac	; 0xcac <Timer1_ICU_InterruptDisable>
 2d8:	08 95       	ret

000002da <ULTRASONIC_Init>:
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 ac 05 	call	0xb58	; 0xb58 <Timer1_Init>
 2e6:	84 e3       	ldi	r24, 0x34	; 52
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 5e 06 	call	0xcbc	; 0xcbc <Timer1_OVF_SetCallBack>
 2ee:	8e e3       	ldi	r24, 0x3E	; 62
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <Timer1_ICU_SetCallBack>
 2f6:	08 95       	ret

000002f8 <ULTRASONIC_GetDistance>:


u8 ULTRASONIC_GetDistance(ULTRASONIC_type ultrasonic_pin)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	c8 2f       	mov	r28, r24
	u8 distance;
	u16 time;
	c=0;
 2fe:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <c+0x1>
 302:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <c>
	flag=0;
 306:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <flag+0x1>
 30a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <flag>
	DIO_WritePin(ultrasonic_pin,HIGH);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	8a e1       	ldi	r24, 0x1A	; 26
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <ULTRASONIC_GetDistance+0x1e>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <ULTRASONIC_GetDistance+0x24>
	_delay_us(10);
	DIO_WritePin(ultrasonic_pin,LOW);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8c 2f       	mov	r24, r28
 320:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_WritePin>
	Timer1_InputCaptureEdge(RISING);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 46 06 	call	0xc8c	; 0xc8c <Timer1_InputCaptureEdge>
	Timer1_ICU_InterruptEnable();
 32a:	0e 94 52 06 	call	0xca4	; 0xca4 <Timer1_ICU_InterruptEnable>
	while(flag<2);
 32e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <flag>
 332:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <flag+0x1>
 336:	02 97       	sbiw	r24, 0x02	; 2
 338:	d0 f3       	brcs	.-12     	; 0x32e <ULTRASONIC_GetDistance+0x36>
	time=t2-t1+((u32)c*65535);
 33a:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <t2>
 33e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <t2+0x1>
 342:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <t1>
 346:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <t1+0x1>
 34a:	28 1b       	sub	r18, r24
 34c:	39 0b       	sbc	r19, r25
 34e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <c>
 352:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <c+0x1>
 356:	28 1b       	sub	r18, r24
 358:	39 0b       	sbc	r19, r25
	distance = time/58;
 35a:	af e9       	ldi	r26, 0x9F	; 159
 35c:	b6 e4       	ldi	r27, 0x46	; 70
 35e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__umulhisi3>
 362:	ec 01       	movw	r28, r24
 364:	d2 95       	swap	r29
 366:	c2 95       	swap	r28
 368:	cf 70       	andi	r28, 0x0F	; 15
 36a:	cd 27       	eor	r28, r29
 36c:	df 70       	andi	r29, 0x0F	; 15
 36e:	cd 27       	eor	r28, r29
	Timer1_ICU_InterruptDisable();
 370:	0e 94 56 06 	call	0xcac	; 0xcac <Timer1_ICU_InterruptDisable>
	return distance;
	
}
 374:	8c 2f       	mov	r24, r28
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <main>:
#include "Config.h"


int main(void)
{
	sei();
 37c:	78 94       	sei
	DIO_Init();
 37e:	0e 94 8d 03 	call	0x71a	; 0x71a <DIO_Init>
	ULTRASONIC_Init();
 382:	0e 94 6d 01 	call	0x2da	; 0x2da <ULTRASONIC_Init>
	Schedular_Init();
 386:	0e 94 16 07 	call	0xe2c	; 0xe2c <Schedular_Init>
	
	EXI_TriggerEdge(EX_INT0,LOW_LEVEL);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 af 03 	call	0x75e	; 0x75e <EXI_TriggerEdge>
	EX_SetCallBack(EX_INT0,Belt_State);
 392:	68 eb       	ldi	r22, 0xB8	; 184
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 0f 04 	call	0x81e	; 0x81e <EX_SetCallBack>
	EXI_Enable(EX_INT0);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 9d 03 	call	0x73a	; 0x73a <EXI_Enable>
	
	OS_TaskCreate(ULTRASONIC_Measure,20,BLOCKED);
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	64 e1       	ldi	r22, 0x14	; 20
 3a6:	8e ec       	ldi	r24, 0xCE	; 206
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 29 07 	call	0xe52	; 0xe52 <OS_TaskCreate>
	OS_TaskCreate(Warning_Action,20,BLOCKED);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	64 e1       	ldi	r22, 0x14	; 20
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 29 07 	call	0xe52	; 0xe52 <OS_TaskCreate>
	OS_TaskCreate(Schedular_Sleep,10,BLOCKED);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	6a e0       	ldi	r22, 0x0A	; 10
 3be:	85 e2       	ldi	r24, 0x25	; 37
 3c0:	97 e0       	ldi	r25, 0x07	; 7
 3c2:	0e 94 29 07 	call	0xe52	; 0xe52 <OS_TaskCreate>
	
	Belt_OFF();
 3c6:	0e 94 99 00 	call	0x132	; 0x132 <Belt_OFF>
    Schedular_Start();
 3ca:	0e 94 22 07 	call	0xe44	; 0xe44 <Schedular_Start>
	
    while (1) 
    {
		OS_TaskExecution();
 3ce:	0e 94 4c 07 	call	0xe98	; 0xe98 <OS_TaskExecution>
 3d2:	fd cf       	rjmp	.-6      	; 0x3ce <main+0x52>

000003d4 <DIO_InitPin>:
		case PD :
		value = PORTD ;
		break;
	}
	return value;
}
 3d4:	98 2f       	mov	r25, r24
 3d6:	96 95       	lsr	r25
 3d8:	96 95       	lsr	r25
 3da:	96 95       	lsr	r25
 3dc:	87 70       	andi	r24, 0x07	; 7
 3de:	61 30       	cpi	r22, 0x01	; 1
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <DIO_InitPin+0x10>
 3e2:	41 c0       	rjmp	.+130    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <DIO_InitPin+0x1a>
 3e6:	62 30       	cpi	r22, 0x02	; 2
 3e8:	09 f4       	brne	.+2      	; 0x3ec <DIO_InitPin+0x18>
 3ea:	8d c0       	rjmp	.+282    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 3ec:	08 95       	ret
 3ee:	91 30       	cpi	r25, 0x01	; 1
 3f0:	99 f0       	breq	.+38     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3f2:	28 f0       	brcs	.+10     	; 0x3fe <DIO_InitPin+0x2a>
 3f4:	92 30       	cpi	r25, 0x02	; 2
 3f6:	e9 f0       	breq	.+58     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3f8:	93 30       	cpi	r25, 0x03	; 3
 3fa:	41 f1       	breq	.+80     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3fc:	08 95       	ret
 3fe:	4a b3       	in	r20, 0x1a	; 26
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	8a 95       	dec	r24
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	cb 01       	movw	r24, r22
 412:	84 2b       	or	r24, r20
 414:	8a bb       	out	0x1a, r24	; 26
 416:	08 95       	ret
 418:	47 b3       	in	r20, 0x17	; 23
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	cb 01       	movw	r24, r22
 42c:	84 2b       	or	r24, r20
 42e:	87 bb       	out	0x17, r24	; 23
 430:	08 95       	ret
 432:	44 b3       	in	r20, 0x14	; 20
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	b9 01       	movw	r22, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	66 0f       	add	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	cb 01       	movw	r24, r22
 446:	84 2b       	or	r24, r20
 448:	84 bb       	out	0x14, r24	; 20
 44a:	08 95       	ret
 44c:	41 b3       	in	r20, 0x11	; 17
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	cb 01       	movw	r24, r22
 460:	84 2b       	or	r24, r20
 462:	81 bb       	out	0x11, r24	; 17
 464:	08 95       	ret
 466:	91 30       	cpi	r25, 0x01	; 1
 468:	c1 f0       	breq	.+48     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 46a:	28 f0       	brcs	.+10     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46c:	92 30       	cpi	r25, 0x02	; 2
 46e:	39 f1       	breq	.+78     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 470:	93 30       	cpi	r25, 0x03	; 3
 472:	b9 f1       	breq	.+110    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 474:	08 95       	ret
 476:	4a b3       	in	r20, 0x1a	; 26
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	b9 01       	movw	r22, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	cb 01       	movw	r24, r22
 48a:	80 95       	com	r24
 48c:	94 2f       	mov	r25, r20
 48e:	98 23       	and	r25, r24
 490:	9a bb       	out	0x1a, r25	; 26
 492:	9b b3       	in	r25, 0x1b	; 27
 494:	89 23       	and	r24, r25
 496:	8b bb       	out	0x1b, r24	; 27
 498:	08 95       	ret
 49a:	47 b3       	in	r20, 0x17	; 23
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4ac:	cb 01       	movw	r24, r22
 4ae:	80 95       	com	r24
 4b0:	94 2f       	mov	r25, r20
 4b2:	98 23       	and	r25, r24
 4b4:	97 bb       	out	0x17, r25	; 23
 4b6:	98 b3       	in	r25, 0x18	; 24
 4b8:	89 23       	and	r24, r25
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	08 95       	ret
 4be:	44 b3       	in	r20, 0x14	; 20
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	b9 01       	movw	r22, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	cb 01       	movw	r24, r22
 4d2:	80 95       	com	r24
 4d4:	94 2f       	mov	r25, r20
 4d6:	98 23       	and	r25, r24
 4d8:	94 bb       	out	0x14, r25	; 20
 4da:	95 b3       	in	r25, 0x15	; 21
 4dc:	89 23       	and	r24, r25
 4de:	85 bb       	out	0x15, r24	; 21
 4e0:	08 95       	ret
 4e2:	44 b3       	in	r20, 0x14	; 20
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	b9 01       	movw	r22, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4f4:	cb 01       	movw	r24, r22
 4f6:	80 95       	com	r24
 4f8:	94 2f       	mov	r25, r20
 4fa:	98 23       	and	r25, r24
 4fc:	94 bb       	out	0x14, r25	; 20
 4fe:	92 b3       	in	r25, 0x12	; 18
 500:	89 23       	and	r24, r25
 502:	82 bb       	out	0x12, r24	; 18
 504:	08 95       	ret
 506:	91 30       	cpi	r25, 0x01	; 1
 508:	c1 f0       	breq	.+48     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 50a:	28 f0       	brcs	.+10     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 50c:	92 30       	cpi	r25, 0x02	; 2
 50e:	39 f1       	breq	.+78     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 510:	93 30       	cpi	r25, 0x03	; 3
 512:	b9 f1       	breq	.+110    	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 514:	08 95       	ret
 516:	4a b3       	in	r20, 0x1a	; 26
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	b9 01       	movw	r22, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 528:	cb 01       	movw	r24, r22
 52a:	96 2f       	mov	r25, r22
 52c:	90 95       	com	r25
 52e:	94 23       	and	r25, r20
 530:	9a bb       	out	0x1a, r25	; 26
 532:	9b b3       	in	r25, 0x1b	; 27
 534:	89 2b       	or	r24, r25
 536:	8b bb       	out	0x1b, r24	; 27
 538:	08 95       	ret
 53a:	47 b3       	in	r20, 0x17	; 23
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 54c:	cb 01       	movw	r24, r22
 54e:	96 2f       	mov	r25, r22
 550:	90 95       	com	r25
 552:	94 23       	and	r25, r20
 554:	97 bb       	out	0x17, r25	; 23
 556:	98 b3       	in	r25, 0x18	; 24
 558:	89 2b       	or	r24, r25
 55a:	88 bb       	out	0x18, r24	; 24
 55c:	08 95       	ret
 55e:	44 b3       	in	r20, 0x14	; 20
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	b9 01       	movw	r22, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	8a 95       	dec	r24
 56e:	e2 f7       	brpl	.-8      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 570:	cb 01       	movw	r24, r22
 572:	96 2f       	mov	r25, r22
 574:	90 95       	com	r25
 576:	94 23       	and	r25, r20
 578:	94 bb       	out	0x14, r25	; 20
 57a:	95 b3       	in	r25, 0x15	; 21
 57c:	89 2b       	or	r24, r25
 57e:	85 bb       	out	0x15, r24	; 21
 580:	08 95       	ret
 582:	44 b3       	in	r20, 0x14	; 20
 584:	21 e0       	ldi	r18, 0x01	; 1
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	b9 01       	movw	r22, r18
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	8a 95       	dec	r24
 592:	e2 f7       	brpl	.-8      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
 594:	cb 01       	movw	r24, r22
 596:	96 2f       	mov	r25, r22
 598:	90 95       	com	r25
 59a:	94 23       	and	r25, r20
 59c:	94 bb       	out	0x14, r25	; 20
 59e:	92 b3       	in	r25, 0x12	; 18
 5a0:	89 2b       	or	r24, r25
 5a2:	82 bb       	out	0x12, r24	; 18
 5a4:	08 95       	ret

000005a6 <DIO_WritePin>:
 5a6:	98 2f       	mov	r25, r24
 5a8:	96 95       	lsr	r25
 5aa:	96 95       	lsr	r25
 5ac:	96 95       	lsr	r25
 5ae:	87 70       	andi	r24, 0x07	; 7
 5b0:	61 30       	cpi	r22, 0x01	; 1
 5b2:	b9 f5       	brne	.+110    	; 0x622 <DIO_WritePin+0x7c>
 5b4:	91 30       	cpi	r25, 0x01	; 1
 5b6:	91 f0       	breq	.+36     	; 0x5dc <DIO_WritePin+0x36>
 5b8:	28 f0       	brcs	.+10     	; 0x5c4 <DIO_WritePin+0x1e>
 5ba:	92 30       	cpi	r25, 0x02	; 2
 5bc:	d9 f0       	breq	.+54     	; 0x5f4 <DIO_WritePin+0x4e>
 5be:	93 30       	cpi	r25, 0x03	; 3
 5c0:	29 f1       	breq	.+74     	; 0x60c <DIO_WritePin+0x66>
 5c2:	2f c0       	rjmp	.+94     	; 0x622 <DIO_WritePin+0x7c>
 5c4:	4b b3       	in	r20, 0x1b	; 27
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	08 2e       	mov	r0, r24
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_WritePin+0x2c>
 5ce:	22 0f       	add	r18, r18
 5d0:	33 1f       	adc	r19, r19
 5d2:	0a 94       	dec	r0
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_WritePin+0x28>
 5d6:	24 2b       	or	r18, r20
 5d8:	2b bb       	out	0x1b, r18	; 27
 5da:	23 c0       	rjmp	.+70     	; 0x622 <DIO_WritePin+0x7c>
 5dc:	48 b3       	in	r20, 0x18	; 24
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	08 2e       	mov	r0, r24
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_WritePin+0x44>
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	0a 94       	dec	r0
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_WritePin+0x40>
 5ee:	24 2b       	or	r18, r20
 5f0:	28 bb       	out	0x18, r18	; 24
 5f2:	17 c0       	rjmp	.+46     	; 0x622 <DIO_WritePin+0x7c>
 5f4:	45 b3       	in	r20, 0x15	; 21
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	08 2e       	mov	r0, r24
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_WritePin+0x5c>
 5fe:	22 0f       	add	r18, r18
 600:	33 1f       	adc	r19, r19
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_WritePin+0x58>
 606:	24 2b       	or	r18, r20
 608:	25 bb       	out	0x15, r18	; 21
 60a:	0b c0       	rjmp	.+22     	; 0x622 <DIO_WritePin+0x7c>
 60c:	42 b3       	in	r20, 0x12	; 18
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	08 2e       	mov	r0, r24
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_WritePin+0x74>
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_WritePin+0x70>
 61e:	24 2b       	or	r18, r20
 620:	22 bb       	out	0x12, r18	; 18
 622:	61 11       	cpse	r22, r1
 624:	3f c0       	rjmp	.+126    	; 0x6a4 <DIO_WritePin+0xfe>
 626:	91 30       	cpi	r25, 0x01	; 1
 628:	a1 f0       	breq	.+40     	; 0x652 <DIO_WritePin+0xac>
 62a:	28 f0       	brcs	.+10     	; 0x636 <DIO_WritePin+0x90>
 62c:	92 30       	cpi	r25, 0x02	; 2
 62e:	f9 f0       	breq	.+62     	; 0x66e <DIO_WritePin+0xc8>
 630:	93 30       	cpi	r25, 0x03	; 3
 632:	59 f1       	breq	.+86     	; 0x68a <DIO_WritePin+0xe4>
 634:	08 95       	ret
 636:	4b b3       	in	r20, 0x1b	; 27
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	b9 01       	movw	r22, r18
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_WritePin+0x9e>
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	8a 95       	dec	r24
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_WritePin+0x9a>
 648:	cb 01       	movw	r24, r22
 64a:	80 95       	com	r24
 64c:	84 23       	and	r24, r20
 64e:	8b bb       	out	0x1b, r24	; 27
 650:	08 95       	ret
 652:	48 b3       	in	r20, 0x18	; 24
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	b9 01       	movw	r22, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_WritePin+0xba>
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	8a 95       	dec	r24
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_WritePin+0xb6>
 664:	cb 01       	movw	r24, r22
 666:	80 95       	com	r24
 668:	84 23       	and	r24, r20
 66a:	88 bb       	out	0x18, r24	; 24
 66c:	08 95       	ret
 66e:	45 b3       	in	r20, 0x15	; 21
 670:	21 e0       	ldi	r18, 0x01	; 1
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	b9 01       	movw	r22, r18
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_WritePin+0xd6>
 678:	66 0f       	add	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	8a 95       	dec	r24
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_WritePin+0xd2>
 680:	cb 01       	movw	r24, r22
 682:	80 95       	com	r24
 684:	84 23       	and	r24, r20
 686:	85 bb       	out	0x15, r24	; 21
 688:	08 95       	ret
 68a:	42 b3       	in	r20, 0x12	; 18
 68c:	21 e0       	ldi	r18, 0x01	; 1
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	b9 01       	movw	r22, r18
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_WritePin+0xf2>
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	8a 95       	dec	r24
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_WritePin+0xee>
 69c:	cb 01       	movw	r24, r22
 69e:	80 95       	com	r24
 6a0:	84 23       	and	r24, r20
 6a2:	82 bb       	out	0x12, r24	; 18
 6a4:	08 95       	ret

000006a6 <DIO_ReadPin>:
 6a6:	28 2f       	mov	r18, r24
 6a8:	26 95       	lsr	r18
 6aa:	26 95       	lsr	r18
 6ac:	26 95       	lsr	r18
 6ae:	87 70       	andi	r24, 0x07	; 7
 6b0:	21 30       	cpi	r18, 0x01	; 1
 6b2:	89 f0       	breq	.+34     	; 0x6d6 <DIO_ReadPin+0x30>
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <DIO_ReadPin+0x1a>
 6b6:	22 30       	cpi	r18, 0x02	; 2
 6b8:	c9 f0       	breq	.+50     	; 0x6ec <DIO_ReadPin+0x46>
 6ba:	23 30       	cpi	r18, 0x03	; 3
 6bc:	11 f1       	breq	.+68     	; 0x702 <DIO_ReadPin+0x5c>
 6be:	2b c0       	rjmp	.+86     	; 0x716 <DIO_ReadPin+0x70>
 6c0:	29 b3       	in	r18, 0x19	; 25
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	a9 01       	movw	r20, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_ReadPin+0x26>
 6c8:	55 95       	asr	r21
 6ca:	47 95       	ror	r20
 6cc:	8a 95       	dec	r24
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_ReadPin+0x22>
 6d0:	94 2f       	mov	r25, r20
 6d2:	91 70       	andi	r25, 0x01	; 1
 6d4:	20 c0       	rjmp	.+64     	; 0x716 <DIO_ReadPin+0x70>
 6d6:	26 b3       	in	r18, 0x16	; 22
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	a9 01       	movw	r20, r18
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_ReadPin+0x3c>
 6de:	55 95       	asr	r21
 6e0:	47 95       	ror	r20
 6e2:	8a 95       	dec	r24
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_ReadPin+0x38>
 6e6:	94 2f       	mov	r25, r20
 6e8:	91 70       	andi	r25, 0x01	; 1
 6ea:	15 c0       	rjmp	.+42     	; 0x716 <DIO_ReadPin+0x70>
 6ec:	23 b3       	in	r18, 0x13	; 19
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	a9 01       	movw	r20, r18
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_ReadPin+0x52>
 6f4:	55 95       	asr	r21
 6f6:	47 95       	ror	r20
 6f8:	8a 95       	dec	r24
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_ReadPin+0x4e>
 6fc:	94 2f       	mov	r25, r20
 6fe:	91 70       	andi	r25, 0x01	; 1
 700:	0a c0       	rjmp	.+20     	; 0x716 <DIO_ReadPin+0x70>
 702:	20 b3       	in	r18, 0x10	; 16
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	a9 01       	movw	r20, r18
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_ReadPin+0x68>
 70a:	55 95       	asr	r21
 70c:	47 95       	ror	r20
 70e:	8a 95       	dec	r24
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_ReadPin+0x64>
 712:	94 2f       	mov	r25, r20
 714:	91 70       	andi	r25, 0x01	; 1
 716:	89 2f       	mov	r24, r25
 718:	08 95       	ret

0000071a <DIO_Init>:

extern void DIO_Init(void)
{
 71a:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 71c:	c0 e0       	ldi	r28, 0x00	; 0
 71e:	09 c0       	rjmp	.+18     	; 0x732 <DIO_Init+0x18>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
 720:	ec 2f       	mov	r30, r28
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	ef 59       	subi	r30, 0x9F	; 159
 726:	ff 4f       	sbci	r31, 0xFF	; 255
 728:	60 81       	ld	r22, Z
 72a:	8c 2f       	mov	r24, r28
 72c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <DIO_InitPin>
}

extern void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 730:	cf 5f       	subi	r28, 0xFF	; 255
 732:	c0 32       	cpi	r28, 0x20	; 32
 734:	a8 f3       	brcs	.-22     	; 0x720 <DIO_Init+0x6>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}
	
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <EXI_Enable>:
		break;
		case EX_INT1:
		CLEAR_BIT(GICR,INT1);
		break;
		case EX_INT2:
		CLEAR_BIT(GICR,INT2);
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	41 f0       	breq	.+16     	; 0x74e <EXI_Enable+0x14>
 73e:	18 f0       	brcs	.+6      	; 0x746 <EXI_Enable+0xc>
 740:	82 30       	cpi	r24, 0x02	; 2
 742:	49 f0       	breq	.+18     	; 0x756 <EXI_Enable+0x1c>
 744:	08 95       	ret
 746:	8b b7       	in	r24, 0x3b	; 59
 748:	80 64       	ori	r24, 0x40	; 64
 74a:	8b bf       	out	0x3b, r24	; 59
 74c:	08 95       	ret
 74e:	8b b7       	in	r24, 0x3b	; 59
 750:	80 68       	ori	r24, 0x80	; 128
 752:	8b bf       	out	0x3b, r24	; 59
 754:	08 95       	ret
 756:	8b b7       	in	r24, 0x3b	; 59
 758:	80 62       	ori	r24, 0x20	; 32
 75a:	8b bf       	out	0x3b, r24	; 59
 75c:	08 95       	ret

0000075e <EXI_TriggerEdge>:
}
void EXI_TriggerEdge(ExInterruptSource_type source,TriggerEdge_type edge)
{
	
	
	switch(source)
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	49 f1       	breq	.+82     	; 0x7b4 <EXI_TriggerEdge+0x56>
 762:	20 f0       	brcs	.+8      	; 0x76c <EXI_TriggerEdge+0xe>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	09 f4       	brne	.+2      	; 0x76a <EXI_TriggerEdge+0xc>
 768:	49 c0       	rjmp	.+146    	; 0x7fc <EXI_TriggerEdge+0x9e>
 76a:	08 95       	ret
	{
		case EX_INT0:
		switch(edge)
 76c:	61 30       	cpi	r22, 0x01	; 1
 76e:	69 f0       	breq	.+26     	; 0x78a <EXI_TriggerEdge+0x2c>
 770:	28 f0       	brcs	.+10     	; 0x77c <EXI_TriggerEdge+0x1e>
 772:	62 30       	cpi	r22, 0x02	; 2
 774:	89 f0       	breq	.+34     	; 0x798 <EXI_TriggerEdge+0x3a>
 776:	63 30       	cpi	r22, 0x03	; 3
 778:	b1 f0       	breq	.+44     	; 0x7a6 <EXI_TriggerEdge+0x48>
 77a:	08 95       	ret
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
 77c:	85 b7       	in	r24, 0x35	; 53
 77e:	8e 7f       	andi	r24, 0xFE	; 254
 780:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 782:	85 b7       	in	r24, 0x35	; 53
 784:	8d 7f       	andi	r24, 0xFD	; 253
 786:	85 bf       	out	0x35, r24	; 53
			break;
 788:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
 78a:	85 b7       	in	r24, 0x35	; 53
 78c:	81 60       	ori	r24, 0x01	; 1
 78e:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 790:	85 b7       	in	r24, 0x35	; 53
 792:	8d 7f       	andi	r24, 0xFD	; 253
 794:	85 bf       	out	0x35, r24	; 53
			break;
 796:	08 95       	ret
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
 798:	85 b7       	in	r24, 0x35	; 53
 79a:	8e 7f       	andi	r24, 0xFE	; 254
 79c:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 79e:	85 b7       	in	r24, 0x35	; 53
 7a0:	82 60       	ori	r24, 0x02	; 2
 7a2:	85 bf       	out	0x35, r24	; 53
			break;
 7a4:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 7a6:	85 b7       	in	r24, 0x35	; 53
 7a8:	81 60       	ori	r24, 0x01	; 1
 7aa:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 7ac:	85 b7       	in	r24, 0x35	; 53
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	85 bf       	out	0x35, r24	; 53
			break;
 7b2:	08 95       	ret
		}
		break;
		case EX_INT1:
		switch(edge)
 7b4:	61 30       	cpi	r22, 0x01	; 1
 7b6:	69 f0       	breq	.+26     	; 0x7d2 <EXI_TriggerEdge+0x74>
 7b8:	28 f0       	brcs	.+10     	; 0x7c4 <EXI_TriggerEdge+0x66>
 7ba:	62 30       	cpi	r22, 0x02	; 2
 7bc:	89 f0       	breq	.+34     	; 0x7e0 <EXI_TriggerEdge+0x82>
 7be:	63 30       	cpi	r22, 0x03	; 3
 7c0:	b1 f0       	breq	.+44     	; 0x7ee <EXI_TriggerEdge+0x90>
 7c2:	08 95       	ret
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
 7c4:	85 b7       	in	r24, 0x35	; 53
 7c6:	8b 7f       	andi	r24, 0xFB	; 251
 7c8:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC11);
 7ca:	85 b7       	in	r24, 0x35	; 53
 7cc:	87 7f       	andi	r24, 0xF7	; 247
 7ce:	85 bf       	out	0x35, r24	; 53
			break;
 7d0:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
 7d2:	85 b7       	in	r24, 0x35	; 53
 7d4:	84 60       	ori	r24, 0x04	; 4
 7d6:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC11);
 7d8:	85 b7       	in	r24, 0x35	; 53
 7da:	87 7f       	andi	r24, 0xF7	; 247
 7dc:	85 bf       	out	0x35, r24	; 53
			break;
 7de:	08 95       	ret
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
 7e0:	85 b7       	in	r24, 0x35	; 53
 7e2:	8b 7f       	andi	r24, 0xFB	; 251
 7e4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 7e6:	85 b7       	in	r24, 0x35	; 53
 7e8:	88 60       	ori	r24, 0x08	; 8
 7ea:	85 bf       	out	0x35, r24	; 53
			break;
 7ec:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 7ee:	85 b7       	in	r24, 0x35	; 53
 7f0:	84 60       	ori	r24, 0x04	; 4
 7f2:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 7f4:	85 b7       	in	r24, 0x35	; 53
 7f6:	88 60       	ori	r24, 0x08	; 8
 7f8:	85 bf       	out	0x35, r24	; 53
			break;
 7fa:	08 95       	ret
		}
		break;
		case EX_INT2:
		switch(edge)
 7fc:	62 30       	cpi	r22, 0x02	; 2
 7fe:	19 f0       	breq	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 800:	63 30       	cpi	r22, 0x03	; 3
 802:	29 f0       	breq	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 804:	08 c0       	rjmp	.+16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		{
			
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
 806:	84 b7       	in	r24, 0x34	; 52
 808:	8f 7b       	andi	r24, 0xBF	; 191
 80a:	84 bf       	out	0x34, r24	; 52
			break;
 80c:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 80e:	84 b7       	in	r24, 0x34	; 52
 810:	80 64       	ori	r24, 0x40	; 64
 812:	84 bf       	out	0x34, r24	; 52
			break;
 814:	08 95       	ret
			default:
			CLEAR_BIT(MCUCSR,ISC2);
 816:	84 b7       	in	r24, 0x34	; 52
 818:	8f 7b       	andi	r24, 0xBF	; 191
 81a:	84 bf       	out	0x34, r24	; 52
 81c:	08 95       	ret

0000081e <EX_SetCallBack>:
}


void EX_SetCallBack(ExInterruptSource_type source,void(*localpf)(void))
{
	switch(source)
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	49 f0       	breq	.+18     	; 0x834 <EX_SetCallBack+0x16>
 822:	18 f0       	brcs	.+6      	; 0x82a <EX_SetCallBack+0xc>
 824:	82 30       	cpi	r24, 0x02	; 2
 826:	59 f0       	breq	.+22     	; 0x83e <EX_SetCallBack+0x20>
 828:	08 95       	ret
	{
		case EX_INT0:
		Pf_EXINT0=localpf;
 82a:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <Pf_EXINT0+0x1>
 82e:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <Pf_EXINT0>
		break;
 832:	08 95       	ret
		case EX_INT1:
		Pf_EXINT1=localpf;
 834:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <Pf_EXINT1+0x1>
 838:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <Pf_EXINT1>
		break;
 83c:	08 95       	ret
		case EX_INT2:
		Pf_EXINT2=localpf;
 83e:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <Pf_EXINT2+0x1>
 842:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <Pf_EXINT2>
 846:	08 95       	ret

00000848 <__vector_1>:
	    break;
	}
	
}
ISR(INT0_vect)
{
 848:	1f 92       	push	r1
 84a:	0f 92       	push	r0
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	0f 92       	push	r0
 850:	11 24       	eor	r1, r1
 852:	2f 93       	push	r18
 854:	3f 93       	push	r19
 856:	4f 93       	push	r20
 858:	5f 93       	push	r21
 85a:	6f 93       	push	r22
 85c:	7f 93       	push	r23
 85e:	8f 93       	push	r24
 860:	9f 93       	push	r25
 862:	af 93       	push	r26
 864:	bf 93       	push	r27
 866:	ef 93       	push	r30
 868:	ff 93       	push	r31
	if (Pf_EXINT0!=NULLPTR)
 86a:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <Pf_EXINT0>
 86e:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <Pf_EXINT0+0x1>
 872:	30 97       	sbiw	r30, 0x00	; 0
 874:	09 f0       	breq	.+2      	; 0x878 <__stack+0x19>
	{
		Pf_EXINT0();
 876:	09 95       	icall
	}	
}
 878:	ff 91       	pop	r31
 87a:	ef 91       	pop	r30
 87c:	bf 91       	pop	r27
 87e:	af 91       	pop	r26
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	7f 91       	pop	r23
 886:	6f 91       	pop	r22
 888:	5f 91       	pop	r21
 88a:	4f 91       	pop	r20
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <__vector_2>:

ISR(INT1_vect)
{
 89a:	1f 92       	push	r1
 89c:	0f 92       	push	r0
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	0f 92       	push	r0
 8a2:	11 24       	eor	r1, r1
 8a4:	2f 93       	push	r18
 8a6:	3f 93       	push	r19
 8a8:	4f 93       	push	r20
 8aa:	5f 93       	push	r21
 8ac:	6f 93       	push	r22
 8ae:	7f 93       	push	r23
 8b0:	8f 93       	push	r24
 8b2:	9f 93       	push	r25
 8b4:	af 93       	push	r26
 8b6:	bf 93       	push	r27
 8b8:	ef 93       	push	r30
 8ba:	ff 93       	push	r31
	if (Pf_EXINT1!=NULLPTR)
 8bc:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <Pf_EXINT1>
 8c0:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <Pf_EXINT1+0x1>
 8c4:	30 97       	sbiw	r30, 0x00	; 0
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__vector_2+0x30>
	{
		Pf_EXINT1();
 8c8:	09 95       	icall
	}	
}
 8ca:	ff 91       	pop	r31
 8cc:	ef 91       	pop	r30
 8ce:	bf 91       	pop	r27
 8d0:	af 91       	pop	r26
 8d2:	9f 91       	pop	r25
 8d4:	8f 91       	pop	r24
 8d6:	7f 91       	pop	r23
 8d8:	6f 91       	pop	r22
 8da:	5f 91       	pop	r21
 8dc:	4f 91       	pop	r20
 8de:	3f 91       	pop	r19
 8e0:	2f 91       	pop	r18
 8e2:	0f 90       	pop	r0
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	0f 90       	pop	r0
 8e8:	1f 90       	pop	r1
 8ea:	18 95       	reti

000008ec <__vector_3>:

ISR(INT2_vect)
{
 8ec:	1f 92       	push	r1
 8ee:	0f 92       	push	r0
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	0f 92       	push	r0
 8f4:	11 24       	eor	r1, r1
 8f6:	2f 93       	push	r18
 8f8:	3f 93       	push	r19
 8fa:	4f 93       	push	r20
 8fc:	5f 93       	push	r21
 8fe:	6f 93       	push	r22
 900:	7f 93       	push	r23
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
 906:	af 93       	push	r26
 908:	bf 93       	push	r27
 90a:	ef 93       	push	r30
 90c:	ff 93       	push	r31
	if (Pf_EXINT2!=NULLPTR)
 90e:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Pf_EXINT2>
 912:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Pf_EXINT2+0x1>
 916:	30 97       	sbiw	r30, 0x00	; 0
 918:	09 f0       	breq	.+2      	; 0x91c <__vector_3+0x30>
	{
		Pf_EXINT2();
 91a:	09 95       	icall
	}
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <Set_SleepMode>:
#include "Power_Management.h"

void Set_SleepMode(SLEEP_MODES mode)
{
	switch(mode)
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	87 30       	cpi	r24, 0x07	; 7
 942:	91 05       	cpc	r25, r1
 944:	08 f0       	brcs	.+2      	; 0x948 <Set_SleepMode+0xa>
 946:	4a c0       	rjmp	.+148    	; 0x9dc <Set_SleepMode+0x9e>
 948:	fc 01       	movw	r30, r24
 94a:	e6 5d       	subi	r30, 0xD6	; 214
 94c:	ff 4f       	sbci	r31, 0xFF	; 255
 94e:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__tablejump2__>
	{
		case IDLE_MODE:
		CLEAR_BIT(MCUCR,SM0);
 952:	85 b7       	in	r24, 0x35	; 53
 954:	8f 7e       	andi	r24, 0xEF	; 239
 956:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,SM1);
 958:	85 b7       	in	r24, 0x35	; 53
 95a:	8f 7d       	andi	r24, 0xDF	; 223
 95c:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,SM2);
 95e:	85 b7       	in	r24, 0x35	; 53
 960:	8f 7b       	andi	r24, 0xBF	; 191
 962:	85 bf       	out	0x35, r24	; 53
		break;
 964:	08 95       	ret
		case ADC_NR_MODE:
		SET_BIT(MCUCR,SM0);
 966:	85 b7       	in	r24, 0x35	; 53
 968:	80 61       	ori	r24, 0x10	; 16
 96a:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,SM1);
 96c:	85 b7       	in	r24, 0x35	; 53
 96e:	8f 7d       	andi	r24, 0xDF	; 223
 970:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,SM2);
 972:	85 b7       	in	r24, 0x35	; 53
 974:	8f 7b       	andi	r24, 0xBF	; 191
 976:	85 bf       	out	0x35, r24	; 53
		break;
 978:	08 95       	ret
		case PWR_DOWN_MODE:
		CLEAR_BIT(MCUCR,SM0);
 97a:	85 b7       	in	r24, 0x35	; 53
 97c:	8f 7e       	andi	r24, 0xEF	; 239
 97e:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,SM1);
 980:	85 b7       	in	r24, 0x35	; 53
 982:	80 62       	ori	r24, 0x20	; 32
 984:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,SM2);
 986:	85 b7       	in	r24, 0x35	; 53
 988:	8f 7b       	andi	r24, 0xBF	; 191
 98a:	85 bf       	out	0x35, r24	; 53
		break;
 98c:	08 95       	ret
		case PWR_SAVE_MODE:
		SET_BIT(MCUCR,SM0);
 98e:	85 b7       	in	r24, 0x35	; 53
 990:	80 61       	ori	r24, 0x10	; 16
 992:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,SM1);
 994:	85 b7       	in	r24, 0x35	; 53
 996:	80 62       	ori	r24, 0x20	; 32
 998:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,SM2);
 99a:	85 b7       	in	r24, 0x35	; 53
 99c:	8f 7b       	andi	r24, 0xBF	; 191
 99e:	85 bf       	out	0x35, r24	; 53
		break;
 9a0:	08 95       	ret
		case RESERVED_MODE:
		CLEAR_BIT(MCUCR,SM0);
 9a2:	85 b7       	in	r24, 0x35	; 53
 9a4:	8f 7e       	andi	r24, 0xEF	; 239
 9a6:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,SM1);
 9a8:	85 b7       	in	r24, 0x35	; 53
 9aa:	8f 7d       	andi	r24, 0xDF	; 223
 9ac:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,SM2);
 9ae:	85 b7       	in	r24, 0x35	; 53
 9b0:	80 64       	ori	r24, 0x40	; 64
 9b2:	85 bf       	out	0x35, r24	; 53
		break;
 9b4:	08 95       	ret
		case STANDBY_MODE:
		CLEAR_BIT(MCUCR,SM0);
 9b6:	85 b7       	in	r24, 0x35	; 53
 9b8:	8f 7e       	andi	r24, 0xEF	; 239
 9ba:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,SM1);
 9bc:	85 b7       	in	r24, 0x35	; 53
 9be:	80 62       	ori	r24, 0x20	; 32
 9c0:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,SM2);
 9c2:	85 b7       	in	r24, 0x35	; 53
 9c4:	80 64       	ori	r24, 0x40	; 64
 9c6:	85 bf       	out	0x35, r24	; 53
		break;
 9c8:	08 95       	ret
		case EXT_STANDBY_MODE:
		SET_BIT(MCUCR,SM0);
 9ca:	85 b7       	in	r24, 0x35	; 53
 9cc:	80 61       	ori	r24, 0x10	; 16
 9ce:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,SM1);
 9d0:	85 b7       	in	r24, 0x35	; 53
 9d2:	80 62       	ori	r24, 0x20	; 32
 9d4:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,SM2);
 9d6:	85 b7       	in	r24, 0x35	; 53
 9d8:	80 64       	ori	r24, 0x40	; 64
 9da:	85 bf       	out	0x35, r24	; 53
 9dc:	08 95       	ret

000009de <CPU_SleepEnable>:
	}
}

void CPU_SleepEnable(void)
{
	SET_BIT(MCUCR,SE);
 9de:	85 b7       	in	r24, 0x35	; 53
 9e0:	80 68       	ori	r24, 0x80	; 128
 9e2:	85 bf       	out	0x35, r24	; 53
 9e4:	08 95       	ret

000009e6 <CPU_SleepDisable>:
}

void CPU_SleepDisable(void)
{
	CLEAR_BIT(MCUCR,SE);
 9e6:	85 b7       	in	r24, 0x35	; 53
 9e8:	8f 77       	andi	r24, 0x7F	; 127
 9ea:	85 bf       	out	0x35, r24	; 53
 9ec:	08 95       	ret

000009ee <Sleep_CPU>:

void Sleep_CPU(void)
{
	do 
	{
		sleep();
 9ee:	88 95       	sleep
 9f0:	08 95       	ret

000009f2 <CPU_Sleep>:
	} while (0);
}

void CPU_Sleep(SLEEP_MODES mode)
{
	Set_SleepMode(mode);
 9f2:	0e 94 9f 04 	call	0x93e	; 0x93e <Set_SleepMode>
	cli();
 9f6:	f8 94       	cli
	CPU_SleepEnable();
 9f8:	0e 94 ef 04 	call	0x9de	; 0x9de <CPU_SleepEnable>
	sei();
 9fc:	78 94       	sei
	Sleep_CPU();
 9fe:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Sleep_CPU>
	CPU_SleepDisable();
 a02:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <CPU_SleepDisable>
 a06:	08 95       	ret

00000a08 <Timer0_Init>:
{
	Timer1_OCA_Fptr=LocalFptr;
}
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_OCB_Fptr=LocalFptr;
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	69 f0       	breq	.+26     	; 0xa26 <Timer0_Init+0x1e>
 a0c:	28 f0       	brcs	.+10     	; 0xa18 <Timer0_Init+0x10>
 a0e:	82 30       	cpi	r24, 0x02	; 2
 a10:	89 f0       	breq	.+34     	; 0xa34 <Timer0_Init+0x2c>
 a12:	83 30       	cpi	r24, 0x03	; 3
 a14:	b1 f0       	breq	.+44     	; 0xa42 <Timer0_Init+0x3a>
 a16:	1b c0       	rjmp	.+54     	; 0xa4e <Timer0_Init+0x46>
 a18:	83 b7       	in	r24, 0x33	; 51
 a1a:	8f 7b       	andi	r24, 0xBF	; 191
 a1c:	83 bf       	out	0x33, r24	; 51
 a1e:	83 b7       	in	r24, 0x33	; 51
 a20:	87 7f       	andi	r24, 0xF7	; 247
 a22:	83 bf       	out	0x33, r24	; 51
 a24:	14 c0       	rjmp	.+40     	; 0xa4e <Timer0_Init+0x46>
 a26:	83 b7       	in	r24, 0x33	; 51
 a28:	80 64       	ori	r24, 0x40	; 64
 a2a:	83 bf       	out	0x33, r24	; 51
 a2c:	83 b7       	in	r24, 0x33	; 51
 a2e:	87 7f       	andi	r24, 0xF7	; 247
 a30:	83 bf       	out	0x33, r24	; 51
 a32:	0d c0       	rjmp	.+26     	; 0xa4e <Timer0_Init+0x46>
 a34:	83 b7       	in	r24, 0x33	; 51
 a36:	8f 7b       	andi	r24, 0xBF	; 191
 a38:	83 bf       	out	0x33, r24	; 51
 a3a:	83 b7       	in	r24, 0x33	; 51
 a3c:	88 60       	ori	r24, 0x08	; 8
 a3e:	83 bf       	out	0x33, r24	; 51
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <Timer0_Init+0x46>
 a42:	83 b7       	in	r24, 0x33	; 51
 a44:	80 64       	ori	r24, 0x40	; 64
 a46:	83 bf       	out	0x33, r24	; 51
 a48:	83 b7       	in	r24, 0x33	; 51
 a4a:	88 60       	ori	r24, 0x08	; 8
 a4c:	83 bf       	out	0x33, r24	; 51
 a4e:	83 b7       	in	r24, 0x33	; 51
 a50:	88 7f       	andi	r24, 0xF8	; 248
 a52:	83 bf       	out	0x33, r24	; 51
 a54:	83 b7       	in	r24, 0x33	; 51
 a56:	68 2b       	or	r22, r24
 a58:	63 bf       	out	0x33, r22	; 51
 a5a:	41 30       	cpi	r20, 0x01	; 1
 a5c:	69 f0       	breq	.+26     	; 0xa78 <Timer0_Init+0x70>
 a5e:	28 f0       	brcs	.+10     	; 0xa6a <Timer0_Init+0x62>
 a60:	42 30       	cpi	r20, 0x02	; 2
 a62:	89 f0       	breq	.+34     	; 0xa86 <Timer0_Init+0x7e>
 a64:	43 30       	cpi	r20, 0x03	; 3
 a66:	b1 f0       	breq	.+44     	; 0xa94 <Timer0_Init+0x8c>
 a68:	08 95       	ret
 a6a:	83 b7       	in	r24, 0x33	; 51
 a6c:	8f 7e       	andi	r24, 0xEF	; 239
 a6e:	83 bf       	out	0x33, r24	; 51
 a70:	83 b7       	in	r24, 0x33	; 51
 a72:	8f 7d       	andi	r24, 0xDF	; 223
 a74:	83 bf       	out	0x33, r24	; 51
 a76:	08 95       	ret
 a78:	83 b7       	in	r24, 0x33	; 51
 a7a:	80 61       	ori	r24, 0x10	; 16
 a7c:	83 bf       	out	0x33, r24	; 51
 a7e:	83 b7       	in	r24, 0x33	; 51
 a80:	8f 7d       	andi	r24, 0xDF	; 223
 a82:	83 bf       	out	0x33, r24	; 51
 a84:	08 95       	ret
 a86:	83 b7       	in	r24, 0x33	; 51
 a88:	8f 7e       	andi	r24, 0xEF	; 239
 a8a:	83 bf       	out	0x33, r24	; 51
 a8c:	83 b7       	in	r24, 0x33	; 51
 a8e:	80 62       	ori	r24, 0x20	; 32
 a90:	83 bf       	out	0x33, r24	; 51
 a92:	08 95       	ret
 a94:	83 b7       	in	r24, 0x33	; 51
 a96:	80 61       	ori	r24, 0x10	; 16
 a98:	83 bf       	out	0x33, r24	; 51
 a9a:	83 b7       	in	r24, 0x33	; 51
 a9c:	80 62       	ori	r24, 0x20	; 32
 a9e:	83 bf       	out	0x33, r24	; 51
 aa0:	08 95       	ret

00000aa2 <Timer0_OV_InterruptEnable>:
 aa2:	89 b7       	in	r24, 0x39	; 57
 aa4:	81 60       	ori	r24, 0x01	; 1
 aa6:	89 bf       	out	0x39, r24	; 57
 aa8:	08 95       	ret

00000aaa <Timer0_OV_SetCallBack>:
 aaa:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <Fptr_OV+0x1>
 aae:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Fptr_OV>
 ab2:	08 95       	ret

00000ab4 <__vector_11>:
 ab4:	1f 92       	push	r1
 ab6:	0f 92       	push	r0
 ab8:	0f b6       	in	r0, 0x3f	; 63
 aba:	0f 92       	push	r0
 abc:	11 24       	eor	r1, r1
 abe:	2f 93       	push	r18
 ac0:	3f 93       	push	r19
 ac2:	4f 93       	push	r20
 ac4:	5f 93       	push	r21
 ac6:	6f 93       	push	r22
 ac8:	7f 93       	push	r23
 aca:	8f 93       	push	r24
 acc:	9f 93       	push	r25
 ace:	af 93       	push	r26
 ad0:	bf 93       	push	r27
 ad2:	ef 93       	push	r30
 ad4:	ff 93       	push	r31
 ad6:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Fptr_OV>
 ada:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Fptr_OV+0x1>
 ade:	30 97       	sbiw	r30, 0x00	; 0
 ae0:	09 f0       	breq	.+2      	; 0xae4 <__vector_11+0x30>
 ae2:	09 95       	icall
 ae4:	ff 91       	pop	r31
 ae6:	ef 91       	pop	r30
 ae8:	bf 91       	pop	r27
 aea:	af 91       	pop	r26
 aec:	9f 91       	pop	r25
 aee:	8f 91       	pop	r24
 af0:	7f 91       	pop	r23
 af2:	6f 91       	pop	r22
 af4:	5f 91       	pop	r21
 af6:	4f 91       	pop	r20
 af8:	3f 91       	pop	r19
 afa:	2f 91       	pop	r18
 afc:	0f 90       	pop	r0
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	0f 90       	pop	r0
 b02:	1f 90       	pop	r1
 b04:	18 95       	reti

00000b06 <__vector_10>:
 b06:	1f 92       	push	r1
 b08:	0f 92       	push	r0
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	0f 92       	push	r0
 b0e:	11 24       	eor	r1, r1
 b10:	2f 93       	push	r18
 b12:	3f 93       	push	r19
 b14:	4f 93       	push	r20
 b16:	5f 93       	push	r21
 b18:	6f 93       	push	r22
 b1a:	7f 93       	push	r23
 b1c:	8f 93       	push	r24
 b1e:	9f 93       	push	r25
 b20:	af 93       	push	r26
 b22:	bf 93       	push	r27
 b24:	ef 93       	push	r30
 b26:	ff 93       	push	r31
 b28:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Fptr_OC>
 b2c:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Fptr_OC+0x1>
 b30:	30 97       	sbiw	r30, 0x00	; 0
 b32:	09 f0       	breq	.+2      	; 0xb36 <__vector_10+0x30>
 b34:	09 95       	icall
 b36:	ff 91       	pop	r31
 b38:	ef 91       	pop	r30
 b3a:	bf 91       	pop	r27
 b3c:	af 91       	pop	r26
 b3e:	9f 91       	pop	r25
 b40:	8f 91       	pop	r24
 b42:	7f 91       	pop	r23
 b44:	6f 91       	pop	r22
 b46:	5f 91       	pop	r21
 b48:	4f 91       	pop	r20
 b4a:	3f 91       	pop	r19
 b4c:	2f 91       	pop	r18
 b4e:	0f 90       	pop	r0
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	0f 90       	pop	r0
 b54:	1f 90       	pop	r1
 b56:	18 95       	reti

00000b58 <Timer1_Init>:
 b58:	82 30       	cpi	r24, 0x02	; 2
 b5a:	29 f1       	breq	.+74     	; 0xba6 <Timer1_Init+0x4e>
 b5c:	28 f4       	brcc	.+10     	; 0xb68 <Timer1_Init+0x10>
 b5e:	88 23       	and	r24, r24
 b60:	41 f0       	breq	.+16     	; 0xb72 <Timer1_Init+0x1a>
 b62:	81 30       	cpi	r24, 0x01	; 1
 b64:	99 f0       	breq	.+38     	; 0xb8c <Timer1_Init+0x34>
 b66:	45 c0       	rjmp	.+138    	; 0xbf2 <Timer1_Init+0x9a>
 b68:	83 30       	cpi	r24, 0x03	; 3
 b6a:	51 f1       	breq	.+84     	; 0xbc0 <Timer1_Init+0x68>
 b6c:	84 30       	cpi	r24, 0x04	; 4
 b6e:	a9 f1       	breq	.+106    	; 0xbda <Timer1_Init+0x82>
 b70:	40 c0       	rjmp	.+128    	; 0xbf2 <Timer1_Init+0x9a>
 b72:	8f b5       	in	r24, 0x2f	; 47
 b74:	8e 7f       	andi	r24, 0xFE	; 254
 b76:	8f bd       	out	0x2f, r24	; 47
 b78:	8f b5       	in	r24, 0x2f	; 47
 b7a:	8d 7f       	andi	r24, 0xFD	; 253
 b7c:	8f bd       	out	0x2f, r24	; 47
 b7e:	8e b5       	in	r24, 0x2e	; 46
 b80:	87 7f       	andi	r24, 0xF7	; 247
 b82:	8e bd       	out	0x2e, r24	; 46
 b84:	8e b5       	in	r24, 0x2e	; 46
 b86:	8f 7e       	andi	r24, 0xEF	; 239
 b88:	8e bd       	out	0x2e, r24	; 46
 b8a:	33 c0       	rjmp	.+102    	; 0xbf2 <Timer1_Init+0x9a>
 b8c:	8f b5       	in	r24, 0x2f	; 47
 b8e:	8e 7f       	andi	r24, 0xFE	; 254
 b90:	8f bd       	out	0x2f, r24	; 47
 b92:	8f b5       	in	r24, 0x2f	; 47
 b94:	8d 7f       	andi	r24, 0xFD	; 253
 b96:	8f bd       	out	0x2f, r24	; 47
 b98:	8e b5       	in	r24, 0x2e	; 46
 b9a:	88 60       	ori	r24, 0x08	; 8
 b9c:	8e bd       	out	0x2e, r24	; 46
 b9e:	8e b5       	in	r24, 0x2e	; 46
 ba0:	80 61       	ori	r24, 0x10	; 16
 ba2:	8e bd       	out	0x2e, r24	; 46
 ba4:	26 c0       	rjmp	.+76     	; 0xbf2 <Timer1_Init+0x9a>
 ba6:	8f b5       	in	r24, 0x2f	; 47
 ba8:	8e 7f       	andi	r24, 0xFE	; 254
 baa:	8f bd       	out	0x2f, r24	; 47
 bac:	8f b5       	in	r24, 0x2f	; 47
 bae:	8d 7f       	andi	r24, 0xFD	; 253
 bb0:	8f bd       	out	0x2f, r24	; 47
 bb2:	8e b5       	in	r24, 0x2e	; 46
 bb4:	88 60       	ori	r24, 0x08	; 8
 bb6:	8e bd       	out	0x2e, r24	; 46
 bb8:	8e b5       	in	r24, 0x2e	; 46
 bba:	8f 7e       	andi	r24, 0xEF	; 239
 bbc:	8e bd       	out	0x2e, r24	; 46
 bbe:	19 c0       	rjmp	.+50     	; 0xbf2 <Timer1_Init+0x9a>
 bc0:	8f b5       	in	r24, 0x2f	; 47
 bc2:	8e 7f       	andi	r24, 0xFE	; 254
 bc4:	8f bd       	out	0x2f, r24	; 47
 bc6:	8f b5       	in	r24, 0x2f	; 47
 bc8:	82 60       	ori	r24, 0x02	; 2
 bca:	8f bd       	out	0x2f, r24	; 47
 bcc:	8e b5       	in	r24, 0x2e	; 46
 bce:	88 60       	ori	r24, 0x08	; 8
 bd0:	8e bd       	out	0x2e, r24	; 46
 bd2:	8e b5       	in	r24, 0x2e	; 46
 bd4:	80 61       	ori	r24, 0x10	; 16
 bd6:	8e bd       	out	0x2e, r24	; 46
 bd8:	0c c0       	rjmp	.+24     	; 0xbf2 <Timer1_Init+0x9a>
 bda:	8f b5       	in	r24, 0x2f	; 47
 bdc:	81 60       	ori	r24, 0x01	; 1
 bde:	8f bd       	out	0x2f, r24	; 47
 be0:	8f b5       	in	r24, 0x2f	; 47
 be2:	82 60       	ori	r24, 0x02	; 2
 be4:	8f bd       	out	0x2f, r24	; 47
 be6:	8e b5       	in	r24, 0x2e	; 46
 be8:	88 60       	ori	r24, 0x08	; 8
 bea:	8e bd       	out	0x2e, r24	; 46
 bec:	8e b5       	in	r24, 0x2e	; 46
 bee:	80 61       	ori	r24, 0x10	; 16
 bf0:	8e bd       	out	0x2e, r24	; 46
 bf2:	41 30       	cpi	r20, 0x01	; 1
 bf4:	69 f0       	breq	.+26     	; 0xc10 <Timer1_Init+0xb8>
 bf6:	28 f0       	brcs	.+10     	; 0xc02 <Timer1_Init+0xaa>
 bf8:	42 30       	cpi	r20, 0x02	; 2
 bfa:	89 f0       	breq	.+34     	; 0xc1e <Timer1_Init+0xc6>
 bfc:	43 30       	cpi	r20, 0x03	; 3
 bfe:	b1 f0       	breq	.+44     	; 0xc2c <Timer1_Init+0xd4>
 c00:	1b c0       	rjmp	.+54     	; 0xc38 <Timer1_Init+0xe0>
 c02:	8f b5       	in	r24, 0x2f	; 47
 c04:	8f 7b       	andi	r24, 0xBF	; 191
 c06:	8f bd       	out	0x2f, r24	; 47
 c08:	8f b5       	in	r24, 0x2f	; 47
 c0a:	8f 77       	andi	r24, 0x7F	; 127
 c0c:	8f bd       	out	0x2f, r24	; 47
 c0e:	14 c0       	rjmp	.+40     	; 0xc38 <Timer1_Init+0xe0>
 c10:	8f b5       	in	r24, 0x2f	; 47
 c12:	80 64       	ori	r24, 0x40	; 64
 c14:	8f bd       	out	0x2f, r24	; 47
 c16:	8f b5       	in	r24, 0x2f	; 47
 c18:	8f 77       	andi	r24, 0x7F	; 127
 c1a:	8f bd       	out	0x2f, r24	; 47
 c1c:	0d c0       	rjmp	.+26     	; 0xc38 <Timer1_Init+0xe0>
 c1e:	8f b5       	in	r24, 0x2f	; 47
 c20:	8f 7b       	andi	r24, 0xBF	; 191
 c22:	8f bd       	out	0x2f, r24	; 47
 c24:	8f b5       	in	r24, 0x2f	; 47
 c26:	80 68       	ori	r24, 0x80	; 128
 c28:	8f bd       	out	0x2f, r24	; 47
 c2a:	06 c0       	rjmp	.+12     	; 0xc38 <Timer1_Init+0xe0>
 c2c:	8f b5       	in	r24, 0x2f	; 47
 c2e:	80 64       	ori	r24, 0x40	; 64
 c30:	8f bd       	out	0x2f, r24	; 47
 c32:	8f b5       	in	r24, 0x2f	; 47
 c34:	80 68       	ori	r24, 0x80	; 128
 c36:	8f bd       	out	0x2f, r24	; 47
 c38:	21 30       	cpi	r18, 0x01	; 1
 c3a:	69 f0       	breq	.+26     	; 0xc56 <Timer1_Init+0xfe>
 c3c:	28 f0       	brcs	.+10     	; 0xc48 <Timer1_Init+0xf0>
 c3e:	22 30       	cpi	r18, 0x02	; 2
 c40:	89 f0       	breq	.+34     	; 0xc64 <Timer1_Init+0x10c>
 c42:	23 30       	cpi	r18, 0x03	; 3
 c44:	b1 f0       	breq	.+44     	; 0xc72 <Timer1_Init+0x11a>
 c46:	1b c0       	rjmp	.+54     	; 0xc7e <Timer1_Init+0x126>
 c48:	8f b5       	in	r24, 0x2f	; 47
 c4a:	8f 7e       	andi	r24, 0xEF	; 239
 c4c:	8f bd       	out	0x2f, r24	; 47
 c4e:	8f b5       	in	r24, 0x2f	; 47
 c50:	8f 7d       	andi	r24, 0xDF	; 223
 c52:	8f bd       	out	0x2f, r24	; 47
 c54:	14 c0       	rjmp	.+40     	; 0xc7e <Timer1_Init+0x126>
 c56:	8f b5       	in	r24, 0x2f	; 47
 c58:	80 61       	ori	r24, 0x10	; 16
 c5a:	8f bd       	out	0x2f, r24	; 47
 c5c:	8f b5       	in	r24, 0x2f	; 47
 c5e:	8f 7d       	andi	r24, 0xDF	; 223
 c60:	8f bd       	out	0x2f, r24	; 47
 c62:	0d c0       	rjmp	.+26     	; 0xc7e <Timer1_Init+0x126>
 c64:	8f b5       	in	r24, 0x2f	; 47
 c66:	8f 7e       	andi	r24, 0xEF	; 239
 c68:	8f bd       	out	0x2f, r24	; 47
 c6a:	8f b5       	in	r24, 0x2f	; 47
 c6c:	80 62       	ori	r24, 0x20	; 32
 c6e:	8f bd       	out	0x2f, r24	; 47
 c70:	06 c0       	rjmp	.+12     	; 0xc7e <Timer1_Init+0x126>
 c72:	8f b5       	in	r24, 0x2f	; 47
 c74:	80 61       	ori	r24, 0x10	; 16
 c76:	8f bd       	out	0x2f, r24	; 47
 c78:	8f b5       	in	r24, 0x2f	; 47
 c7a:	80 62       	ori	r24, 0x20	; 32
 c7c:	8f bd       	out	0x2f, r24	; 47
 c7e:	8e b5       	in	r24, 0x2e	; 46
 c80:	88 7f       	andi	r24, 0xF8	; 248
 c82:	8e bd       	out	0x2e, r24	; 46
 c84:	8e b5       	in	r24, 0x2e	; 46
 c86:	68 2b       	or	r22, r24
 c88:	6e bd       	out	0x2e, r22	; 46
 c8a:	08 95       	ret

00000c8c <Timer1_InputCaptureEdge>:
 c8c:	81 11       	cpse	r24, r1
 c8e:	04 c0       	rjmp	.+8      	; 0xc98 <Timer1_InputCaptureEdge+0xc>
 c90:	8e b5       	in	r24, 0x2e	; 46
 c92:	80 64       	ori	r24, 0x40	; 64
 c94:	8e bd       	out	0x2e, r24	; 46
 c96:	08 95       	ret
 c98:	81 30       	cpi	r24, 0x01	; 1
 c9a:	19 f4       	brne	.+6      	; 0xca2 <Timer1_InputCaptureEdge+0x16>
 c9c:	8e b5       	in	r24, 0x2e	; 46
 c9e:	8f 7b       	andi	r24, 0xBF	; 191
 ca0:	8e bd       	out	0x2e, r24	; 46
 ca2:	08 95       	ret

00000ca4 <Timer1_ICU_InterruptEnable>:
 ca4:	89 b7       	in	r24, 0x39	; 57
 ca6:	80 62       	ori	r24, 0x20	; 32
 ca8:	89 bf       	out	0x39, r24	; 57
 caa:	08 95       	ret

00000cac <Timer1_ICU_InterruptDisable>:
 cac:	89 b7       	in	r24, 0x39	; 57
 cae:	8f 7d       	andi	r24, 0xDF	; 223
 cb0:	89 bf       	out	0x39, r24	; 57
 cb2:	08 95       	ret

00000cb4 <Timer1_OVF_InterruptDisable>:
 cb4:	89 b7       	in	r24, 0x39	; 57
 cb6:	8b 7f       	andi	r24, 0xFB	; 251
 cb8:	89 bf       	out	0x39, r24	; 57
 cba:	08 95       	ret

00000cbc <Timer1_OVF_SetCallBack>:
 cbc:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <Timer1_OVF_Fptr+0x1>
 cc0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Timer1_OVF_Fptr>
 cc4:	08 95       	ret

00000cc6 <Timer1_ICU_SetCallBack>:
}
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_ICU_Fptr=LocalFptr;
 cc6:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <Timer1_ICU_Fptr+0x1>
 cca:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <Timer1_ICU_Fptr>
 cce:	08 95       	ret

00000cd0 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
 cd0:	1f 92       	push	r1
 cd2:	0f 92       	push	r0
 cd4:	0f b6       	in	r0, 0x3f	; 63
 cd6:	0f 92       	push	r0
 cd8:	11 24       	eor	r1, r1
 cda:	2f 93       	push	r18
 cdc:	3f 93       	push	r19
 cde:	4f 93       	push	r20
 ce0:	5f 93       	push	r21
 ce2:	6f 93       	push	r22
 ce4:	7f 93       	push	r23
 ce6:	8f 93       	push	r24
 ce8:	9f 93       	push	r25
 cea:	af 93       	push	r26
 cec:	bf 93       	push	r27
 cee:	ef 93       	push	r30
 cf0:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=NULLPTR)
 cf2:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Timer1_OVF_Fptr>
 cf6:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Timer1_OVF_Fptr+0x1>
 cfa:	30 97       	sbiw	r30, 0x00	; 0
 cfc:	09 f0       	breq	.+2      	; 0xd00 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
 cfe:	09 95       	icall
	}
}
 d00:	ff 91       	pop	r31
 d02:	ef 91       	pop	r30
 d04:	bf 91       	pop	r27
 d06:	af 91       	pop	r26
 d08:	9f 91       	pop	r25
 d0a:	8f 91       	pop	r24
 d0c:	7f 91       	pop	r23
 d0e:	6f 91       	pop	r22
 d10:	5f 91       	pop	r21
 d12:	4f 91       	pop	r20
 d14:	3f 91       	pop	r19
 d16:	2f 91       	pop	r18
 d18:	0f 90       	pop	r0
 d1a:	0f be       	out	0x3f, r0	; 63
 d1c:	0f 90       	pop	r0
 d1e:	1f 90       	pop	r1
 d20:	18 95       	reti

00000d22 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
 d22:	1f 92       	push	r1
 d24:	0f 92       	push	r0
 d26:	0f b6       	in	r0, 0x3f	; 63
 d28:	0f 92       	push	r0
 d2a:	11 24       	eor	r1, r1
 d2c:	2f 93       	push	r18
 d2e:	3f 93       	push	r19
 d30:	4f 93       	push	r20
 d32:	5f 93       	push	r21
 d34:	6f 93       	push	r22
 d36:	7f 93       	push	r23
 d38:	8f 93       	push	r24
 d3a:	9f 93       	push	r25
 d3c:	af 93       	push	r26
 d3e:	bf 93       	push	r27
 d40:	ef 93       	push	r30
 d42:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULLPTR)
 d44:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Timer1_OCA_Fptr>
 d48:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Timer1_OCA_Fptr+0x1>
 d4c:	30 97       	sbiw	r30, 0x00	; 0
 d4e:	09 f0       	breq	.+2      	; 0xd52 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 d50:	09 95       	icall
	}
}
 d52:	ff 91       	pop	r31
 d54:	ef 91       	pop	r30
 d56:	bf 91       	pop	r27
 d58:	af 91       	pop	r26
 d5a:	9f 91       	pop	r25
 d5c:	8f 91       	pop	r24
 d5e:	7f 91       	pop	r23
 d60:	6f 91       	pop	r22
 d62:	5f 91       	pop	r21
 d64:	4f 91       	pop	r20
 d66:	3f 91       	pop	r19
 d68:	2f 91       	pop	r18
 d6a:	0f 90       	pop	r0
 d6c:	0f be       	out	0x3f, r0	; 63
 d6e:	0f 90       	pop	r0
 d70:	1f 90       	pop	r1
 d72:	18 95       	reti

00000d74 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
 d74:	1f 92       	push	r1
 d76:	0f 92       	push	r0
 d78:	0f b6       	in	r0, 0x3f	; 63
 d7a:	0f 92       	push	r0
 d7c:	11 24       	eor	r1, r1
 d7e:	2f 93       	push	r18
 d80:	3f 93       	push	r19
 d82:	4f 93       	push	r20
 d84:	5f 93       	push	r21
 d86:	6f 93       	push	r22
 d88:	7f 93       	push	r23
 d8a:	8f 93       	push	r24
 d8c:	9f 93       	push	r25
 d8e:	af 93       	push	r26
 d90:	bf 93       	push	r27
 d92:	ef 93       	push	r30
 d94:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULLPTR)
 d96:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <Timer1_OCB_Fptr>
 d9a:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <Timer1_OCB_Fptr+0x1>
 d9e:	30 97       	sbiw	r30, 0x00	; 0
 da0:	09 f0       	breq	.+2      	; 0xda4 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
 da2:	09 95       	icall
	}
}
 da4:	ff 91       	pop	r31
 da6:	ef 91       	pop	r30
 da8:	bf 91       	pop	r27
 daa:	af 91       	pop	r26
 dac:	9f 91       	pop	r25
 dae:	8f 91       	pop	r24
 db0:	7f 91       	pop	r23
 db2:	6f 91       	pop	r22
 db4:	5f 91       	pop	r21
 db6:	4f 91       	pop	r20
 db8:	3f 91       	pop	r19
 dba:	2f 91       	pop	r18
 dbc:	0f 90       	pop	r0
 dbe:	0f be       	out	0x3f, r0	; 63
 dc0:	0f 90       	pop	r0
 dc2:	1f 90       	pop	r1
 dc4:	18 95       	reti

00000dc6 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
 dc6:	1f 92       	push	r1
 dc8:	0f 92       	push	r0
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	0f 92       	push	r0
 dce:	11 24       	eor	r1, r1
 dd0:	2f 93       	push	r18
 dd2:	3f 93       	push	r19
 dd4:	4f 93       	push	r20
 dd6:	5f 93       	push	r21
 dd8:	6f 93       	push	r22
 dda:	7f 93       	push	r23
 ddc:	8f 93       	push	r24
 dde:	9f 93       	push	r25
 de0:	af 93       	push	r26
 de2:	bf 93       	push	r27
 de4:	ef 93       	push	r30
 de6:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULLPTR)
 de8:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <Timer1_ICU_Fptr>
 dec:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <Timer1_ICU_Fptr+0x1>
 df0:	30 97       	sbiw	r30, 0x00	; 0
 df2:	09 f0       	breq	.+2      	; 0xdf6 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 df4:	09 95       	icall
	}
 df6:	ff 91       	pop	r31
 df8:	ef 91       	pop	r30
 dfa:	bf 91       	pop	r27
 dfc:	af 91       	pop	r26
 dfe:	9f 91       	pop	r25
 e00:	8f 91       	pop	r24
 e02:	7f 91       	pop	r23
 e04:	6f 91       	pop	r22
 e06:	5f 91       	pop	r21
 e08:	4f 91       	pop	r20
 e0a:	3f 91       	pop	r19
 e0c:	2f 91       	pop	r18
 e0e:	0f 90       	pop	r0
 e10:	0f be       	out	0x3f, r0	; 63
 e12:	0f 90       	pop	r0
 e14:	1f 90       	pop	r1
 e16:	18 95       	reti

00000e18 <WDT_Set>:
#include "WDT.h"

void WDT_Set(TimeOut_type time)
{
	u8 wdt_value=0x08; //WDE Set & WDTOE Cleared 0x0b00001000
	wdt_value|=time;
 e18:	88 60       	ori	r24, 0x08	; 8
	WDTCR|=(1<<WDTOE)|(1<<WDE);
 e1a:	91 b5       	in	r25, 0x21	; 33
 e1c:	98 61       	ori	r25, 0x18	; 24
 e1e:	91 bd       	out	0x21, r25	; 33
	WDTCR=wdt_value;
 e20:	81 bd       	out	0x21, r24	; 33
 e22:	08 95       	ret

00000e24 <WDT_Stop>:
}


void WDT_Stop(void)
{
	WDTCR=(1<<WDTOE)|(1<<WDE);
 e24:	88 e1       	ldi	r24, 0x18	; 24
 e26:	81 bd       	out	0x21, r24	; 33
	WDTCR=0;
 e28:	11 bc       	out	0x21, r1	; 33
 e2a:	08 95       	ret

00000e2c <Schedular_Init>:
			}
			task_number--;
		}
		return OK;
	}
}
 e2c:	40 e0       	ldi	r20, 0x00	; 0
 e2e:	62 e0       	ldi	r22, 0x02	; 2
 e30:	80 e0       	ldi	r24, 0x00	; 0
 e32:	0e 94 04 05 	call	0xa08	; 0xa08 <Timer0_Init>
 e36:	8c e9       	ldi	r24, 0x9C	; 156
 e38:	82 bf       	out	0x32, r24	; 50
 e3a:	8e ea       	ldi	r24, 0xAE	; 174
 e3c:	97 e0       	ldi	r25, 0x07	; 7
 e3e:	0e 94 55 05 	call	0xaaa	; 0xaaa <Timer0_OV_SetCallBack>
 e42:	08 95       	ret

00000e44 <Schedular_Start>:
 e44:	0e 94 51 05 	call	0xaa2	; 0xaa2 <Timer0_OV_InterruptEnable>
 e48:	08 95       	ret

00000e4a <Schedular_Sleep>:
 e4a:	80 e0       	ldi	r24, 0x00	; 0
 e4c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <CPU_Sleep>
 e50:	08 95       	ret

00000e52 <OS_TaskCreate>:
 e52:	9c 01       	movw	r18, r24
 e54:	9c ef       	ldi	r25, 0xFC	; 252
 e56:	96 0f       	add	r25, r22
 e58:	91 31       	cpi	r25, 0x11	; 17
 e5a:	d0 f4       	brcc	.+52     	; 0xe90 <OS_TaskCreate+0x3e>
 e5c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <task_number>
 e60:	8b 30       	cpi	r24, 0x0B	; 11
 e62:	c0 f4       	brcc	.+48     	; 0xe94 <OS_TaskCreate+0x42>
 e64:	e8 2f       	mov	r30, r24
 e66:	f0 e0       	ldi	r31, 0x00	; 0
 e68:	df 01       	movw	r26, r30
 e6a:	aa 0f       	add	r26, r26
 e6c:	bb 1f       	adc	r27, r27
 e6e:	aa 0f       	add	r26, r26
 e70:	bb 1f       	adc	r27, r27
 e72:	ea 0f       	add	r30, r26
 e74:	fb 1f       	adc	r31, r27
 e76:	ee 55       	subi	r30, 0x5E	; 94
 e78:	ff 4f       	sbci	r31, 0xFF	; 255
 e7a:	31 83       	std	Z+1, r19	; 0x01
 e7c:	20 83       	st	Z, r18
 e7e:	44 83       	std	Z+4, r20	; 0x04
 e80:	62 83       	std	Z+2, r22	; 0x02
 e82:	91 e0       	ldi	r25, 0x01	; 1
 e84:	93 83       	std	Z+3, r25	; 0x03
 e86:	8f 5f       	subi	r24, 0xFF	; 255
 e88:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <task_number>
 e8c:	80 e0       	ldi	r24, 0x00	; 0
 e8e:	08 95       	ret
 e90:	82 e0       	ldi	r24, 0x02	; 2
 e92:	08 95       	ret
 e94:	83 e0       	ldi	r24, 0x03	; 3
 e96:	08 95       	ret

00000e98 <OS_TaskExecution>:


void OS_TaskExecution(void)
{
 e98:	0f 93       	push	r16
 e9a:	1f 93       	push	r17
 e9c:	cf 93       	push	r28
	
	for (u8 i=0;i<task_number;i++)
 e9e:	c0 e0       	ldi	r28, 0x00	; 0
 ea0:	16 c0       	rjmp	.+44     	; 0xece <OS_TaskExecution+0x36>
	{
		if(Taskstruct[i].state== READY)
 ea2:	8c 2f       	mov	r24, r28
 ea4:	90 e0       	ldi	r25, 0x00	; 0
 ea6:	fc 01       	movw	r30, r24
 ea8:	ee 0f       	add	r30, r30
 eaa:	ff 1f       	adc	r31, r31
 eac:	ee 0f       	add	r30, r30
 eae:	ff 1f       	adc	r31, r31
 eb0:	e8 0f       	add	r30, r24
 eb2:	f9 1f       	adc	r31, r25
 eb4:	ee 55       	subi	r30, 0x5E	; 94
 eb6:	ff 4f       	sbci	r31, 0xFF	; 255
 eb8:	24 81       	ldd	r18, Z+4	; 0x04
 eba:	21 30       	cpi	r18, 0x01	; 1
 ebc:	39 f4       	brne	.+14     	; 0xecc <OS_TaskExecution+0x34>
		{
			Taskstruct[i].function();
 ebe:	8f 01       	movw	r16, r30
 ec0:	01 90       	ld	r0, Z+
 ec2:	f0 81       	ld	r31, Z
 ec4:	e0 2d       	mov	r30, r0
 ec6:	09 95       	icall
			Taskstruct[i].state = BLOCKED;
 ec8:	f8 01       	movw	r30, r16
 eca:	14 82       	std	Z+4, r1	; 0x04


void OS_TaskExecution(void)
{
	
	for (u8 i=0;i<task_number;i++)
 ecc:	cf 5f       	subi	r28, 0xFF	; 255
 ece:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <task_number>
 ed2:	c8 17       	cp	r28, r24
 ed4:	30 f3       	brcs	.-52     	; 0xea2 <OS_TaskExecution+0xa>
		{
			Taskstruct[i].function();
			Taskstruct[i].state = BLOCKED;
		}
	}
}
 ed6:	cf 91       	pop	r28
 ed8:	1f 91       	pop	r17
 eda:	0f 91       	pop	r16
 edc:	08 95       	ret

00000ede <OS_TaskTimer>:

void OS_TaskTimer(void)
{
	WDT_Stop();
 ede:	0e 94 12 07 	call	0xe24	; 0xe24 <WDT_Stop>
	for (u8 i=0;i<task_number;i++)
 ee2:	20 e0       	ldi	r18, 0x00	; 0
 ee4:	36 c0       	rjmp	.+108    	; 0xf52 <OS_TaskTimer+0x74>
	{
		if (Taskstruct[i].state!= SUSPENDED)
 ee6:	82 2f       	mov	r24, r18
 ee8:	90 e0       	ldi	r25, 0x00	; 0
 eea:	fc 01       	movw	r30, r24
 eec:	ee 0f       	add	r30, r30
 eee:	ff 1f       	adc	r31, r31
 ef0:	ee 0f       	add	r30, r30
 ef2:	ff 1f       	adc	r31, r31
 ef4:	e8 0f       	add	r30, r24
 ef6:	f9 1f       	adc	r31, r25
 ef8:	ee 55       	subi	r30, 0x5E	; 94
 efa:	ff 4f       	sbci	r31, 0xFF	; 255
 efc:	34 81       	ldd	r19, Z+4	; 0x04
 efe:	32 30       	cpi	r19, 0x02	; 2
 f00:	39 f1       	breq	.+78     	; 0xf50 <OS_TaskTimer+0x72>
		{
			if (Taskstruct[i].time_cnt >= Taskstruct[i].t_periodicity)
 f02:	fc 01       	movw	r30, r24
 f04:	ee 0f       	add	r30, r30
 f06:	ff 1f       	adc	r31, r31
 f08:	ee 0f       	add	r30, r30
 f0a:	ff 1f       	adc	r31, r31
 f0c:	e8 0f       	add	r30, r24
 f0e:	f9 1f       	adc	r31, r25
 f10:	ee 55       	subi	r30, 0x5E	; 94
 f12:	ff 4f       	sbci	r31, 0xFF	; 255
 f14:	33 81       	ldd	r19, Z+3	; 0x03
 f16:	42 81       	ldd	r20, Z+2	; 0x02
 f18:	34 17       	cp	r19, r20
 f1a:	70 f0       	brcs	.+28     	; 0xf38 <OS_TaskTimer+0x5a>
			{
				Taskstruct[i].time_cnt=1;
 f1c:	fc 01       	movw	r30, r24
 f1e:	ee 0f       	add	r30, r30
 f20:	ff 1f       	adc	r31, r31
 f22:	ee 0f       	add	r30, r30
 f24:	ff 1f       	adc	r31, r31
 f26:	8e 0f       	add	r24, r30
 f28:	9f 1f       	adc	r25, r31
 f2a:	fc 01       	movw	r30, r24
 f2c:	ee 55       	subi	r30, 0x5E	; 94
 f2e:	ff 4f       	sbci	r31, 0xFF	; 255
 f30:	81 e0       	ldi	r24, 0x01	; 1
 f32:	83 83       	std	Z+3, r24	; 0x03
				Taskstruct[i].state=READY;
 f34:	84 83       	std	Z+4, r24	; 0x04
 f36:	0c c0       	rjmp	.+24     	; 0xf50 <OS_TaskTimer+0x72>
			}
			else
			Taskstruct[i].time_cnt++;
 f38:	fc 01       	movw	r30, r24
 f3a:	ee 0f       	add	r30, r30
 f3c:	ff 1f       	adc	r31, r31
 f3e:	ee 0f       	add	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	8e 0f       	add	r24, r30
 f44:	9f 1f       	adc	r25, r31
 f46:	fc 01       	movw	r30, r24
 f48:	ee 55       	subi	r30, 0x5E	; 94
 f4a:	ff 4f       	sbci	r31, 0xFF	; 255
 f4c:	3f 5f       	subi	r19, 0xFF	; 255
 f4e:	33 83       	std	Z+3, r19	; 0x03
}

void OS_TaskTimer(void)
{
	WDT_Stop();
	for (u8 i=0;i<task_number;i++)
 f50:	2f 5f       	subi	r18, 0xFF	; 255
 f52:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <task_number>
 f56:	28 17       	cp	r18, r24
 f58:	30 f2       	brcs	.-116    	; 0xee6 <OS_TaskTimer+0x8>
			}
			else
			Taskstruct[i].time_cnt++;
		}
	}
}
 f5a:	08 95       	ret

00000f5c <Timer>:
volatile static u8 _100usec=0;


void Timer(void)
{
	WDT_Set(WDT_TIME);
 f5c:	82 e0       	ldi	r24, 0x02	; 2
 f5e:	0e 94 0c 07 	call	0xe18	; 0xe18 <WDT_Set>
	TCNT0=INT_TIME;
 f62:	8c e9       	ldi	r24, 0x9C	; 156
 f64:	82 bf       	out	0x32, r24	; 50
	
	_100usec++;
 f66:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_100usec>
 f6a:	8f 5f       	subi	r24, 0xFF	; 255
 f6c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_100usec>
	if(_100usec >= 50)
 f70:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <_100usec>
 f74:	82 33       	cpi	r24, 0x32	; 50
 f76:	20 f0       	brcs	.+8      	; 0xf80 <Timer+0x24>
	{
		_100usec=0;
 f78:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <_100usec>
		OS_TaskTimer();
 f7c:	0e 94 6f 07 	call	0xede	; 0xede <OS_TaskTimer>
 f80:	08 95       	ret

00000f82 <__tablejump2__>:
 f82:	ee 0f       	add	r30, r30
 f84:	ff 1f       	adc	r31, r31
 f86:	05 90       	lpm	r0, Z+
 f88:	f4 91       	lpm	r31, Z
 f8a:	e0 2d       	mov	r30, r0
 f8c:	09 94       	ijmp

00000f8e <__umulhisi3>:
 f8e:	a2 9f       	mul	r26, r18
 f90:	b0 01       	movw	r22, r0
 f92:	b3 9f       	mul	r27, r19
 f94:	c0 01       	movw	r24, r0
 f96:	a3 9f       	mul	r26, r19
 f98:	70 0d       	add	r23, r0
 f9a:	81 1d       	adc	r24, r1
 f9c:	11 24       	eor	r1, r1
 f9e:	91 1d       	adc	r25, r1
 fa0:	b2 9f       	mul	r27, r18
 fa2:	70 0d       	add	r23, r0
 fa4:	81 1d       	adc	r24, r1
 fa6:	11 24       	eor	r1, r1
 fa8:	91 1d       	adc	r25, r1
 faa:	08 95       	ret

00000fac <_exit>:
 fac:	f8 94       	cli

00000fae <__stop_program>:
 fae:	ff cf       	rjmp	.-2      	; 0xfae <__stop_program>
